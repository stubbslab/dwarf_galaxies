#This class serves as the repository for start MCMC parameters.
#It is needed so that I have a fixed reference for where I started each MCMC chain.
#These will need to be updated as we change which parameters we want to modify.
#Note that which parameters you specify here will always need to be kept consistent with the MCMCParametersToVary in the dSphParametersStorer file.
#The numerical label of each start parameter set (what will appear in the name of the output file that uses a given set of start parameters) is the position of the parameter set in the storage array (starting from 0).  

import math
import random 
from BackgroundMCMCInformationStorer import BackgroundStorer
from samplingFunctions import constrainedUniform
from samplingFunctions import varyUnitVector
from samplingFunctions import elSurrogateUniform

class StartMCMCParameterStorer:

    #Returns the start parameter dictionary for the system with the disk or without it.  
    def getStartParameters(self, index, withDisk = 0):
        if withDisk:
            print len(self.startParametersWithDisk) 
            params_to_store = self.startParametersWithDisk[index]
	else:
	    params_to_store = self.startParametersWithoutDisk[index]
        param_dict = {}
        for key in self.startParamIndeces:
            param_dict[key] = params_to_store[self.startParamIndeces[key]]
        return param_dict
    #The hardcoded start parameters.
    #Note that if you change these, then the labels on the MCMC output files will no longer be quite valid, so it may be worth archiving old versions of this class as modifications are made.  
    def __init__(self, draw = 'random'):
        #self.startParamIndeces = {'M':0,'rs':1,'phi':2,'theta':3,'zeta':4,'el':5,'eps':6,'a':7,'b':8,'lam':9}
        BackgroundInfo = BackgroundStorer ()
        self.startParamIndeces = {'M':0,'rs':1,'halo_sym_axis':2,'halo_center':3,'zeta':4,'el':5,'eps':6,'disk_sym_axis':7,'disk_center':8,'lam':9}
        self.param_ranges = BackgroundInfo.param_ranges
        self.param_step_sizes = BackgroundInfo.param_step_sizes
        self.r_half_light = 791.0
        self.M_star = 10.0 ** 7.39 
        # M, rs, halo_sym_axis, halo_center, zeta, el, eps, disk_sym_axis, disk_center, lam 
        if draw == 'random':
            #Draw from start parameters randomly determined within a reasonable parameter space
            self.startParametersWithoutDisk =[[70.3571 * self.M_star, self.r_half_light * 8.83547, [-0.06359, -0.01797, 0.92016], [100.0*-0.629, 0.0, 100.0*-1.892], 1.0, 6.102, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [17.1108 * self.M_star, self.r_half_light * 9.05347, [-0.68151, 0.14758, 0.04311],  [100.0*-0.775, 0.0, 100.0*0.982],  1.0, 0.131, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [37.8199 * self.M_star, self.r_half_light * 3.85601, [-0.73428, 0.60676, 0.20308], [100.0*2.950, 0.0, 100.0*-2.408],  1.0, 8.031, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [61.1365 * self.M_star, self.r_half_light * 7.30224, [-0.36101, -0.45968, 0.67935], [100.0*-0.850, 0.0, 100.0*-1.004], 1.0, 0.149, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [55.1635 * self.M_star, self.r_half_light * 5.89776, [-0.11814, 0.06451, 0.49192],  [100.0*-0.369, 0.0, 100.0*0.964],  1.0, 6.467, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [74.8945 * self.M_star, self.r_half_light * 7.56676, [-0.24971, 0.72445, 0.60275], [100.0*-0.884, 0.0, 100.0*1.039],  1.0, 0.103, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [84.7848 * self.M_star, self.r_half_light * 4.87031, [0.70303, -0.28512, 0.01099],  [100.0*2.885, 0.0, 100.0*1.527],   1.0, 1.281, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [65.0552 * self.M_star, self.r_half_light * 9.33663, [0.10046, 0.76190, 0.49025],   [100.0*1.888, 0.0, 100.0*0.598],   1.0, 0.112, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [48.5131 * self.M_star, self.r_half_light * 7.03752, [0.11986, 0.50397, 0.18424],   [100.0*-1.277, 0.0, 100.0*-2.792], 1.0, 8.433, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [82.4393 * self.M_star, self.r_half_light * 3.80708, [-0.02893, -0.92939, 0.03744], [100.0*-1.277, 0.0, 100.0*0.875],  1.0, 0.175, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [91.2404 * self.M_star, self.r_half_light * 7.01702, [-0.39061, -0.01523, 0.0419], [100.0*-1.496, 0.0, 100.0*1.237],  1.0, 6.434, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [68.8804 * self.M_star, self.r_half_light * 8.39479, [0.15434, -0.22401, 0.05141], [100.0*1.352, 0.0, 100.0*1.258],   1.0, 0.455, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [12.7499 * self.M_star, self.r_half_light * 0.35373, [0.09645, 0.10003, 0.15474],   [100.0*-2.493, 0.0, 100.0*-2.353], 1.0, 8.235, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [88.2845 * self.M_star, self.r_half_light * 3.31369, [0.89324, 0.00262, 0.27069],  [100.0*0.233, 0.0, 100.0*-0.229],  1.0, 0.336, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [26.6478 * self.M_star, self.r_half_light * 7.72053, [0.42512, -0.49009, 0.63460],  [100.0*-2.317, 0.0, 100.0*2.926],  1.0, 4.631, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [54.1638 * self.M_star, self.r_half_light * 6.44575, [0.48098, 0.14876, 0.68992],  [100.0*1.268, 0.0, 100.0*1.725],   1.0, 0.372, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.4969 * self.M_star, self.r_half_light * 3.96718, [-0.05124, -0.39002, 0.63549], [100.0*1.787, 0.0, 100.0*1.611],   1.0, 5.417, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [6.58256 * self.M_star, self.r_half_light * 4.51944, [-0.73533, 0.27922, 0.08652], [100.0*0.626, 0.0, 100.0*1.336],   1.0, 0.666, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [4.13608 * self.M_star, self.r_half_light * 8.89791, [-0.08978, -0.49215, 0.5346], [100.0*0.375, 0.0, 100.0*-0.613],  1.0, 3.869, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [42.412  * self.M_star, self.r_half_light * 0.75362, [0.57384, -0.31836, 0.60926], [100.0*-1.792, 0.0,100.0* 1.832],  1.0, 0.153, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [47.1894 * self.M_star, self.r_half_light * 4.12288, [-0.00659, -0.49763, 0.11612], [100.0*0.212, 0.0,100.0* 1.856],   1.0, 2.835, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [37.5181 * self.M_star, self.r_half_light * 4.77909, [-0.52118, 0.19206, 0.43382], [100.0*0.499, 0.0, 100.0*-1.749],  1.0, 0.258, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [85.3793 * self.M_star, self.r_half_light * 2.71734, [0.04933, -0.58622, 0.19584], [100.0*-0.491, 0.0, 100.0*1.839],  1.0, 7.775, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [10.5465 * self.M_star, self.r_half_light * 4.68436, [-0.71056, -0.49361, 0.25157], [100.0*-1.092, 0.0, 100.0*1.040],  1.0, 0.387, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [94.7636 * self.M_star, self.r_half_light * 7.95765, [0.80002, 0.52432, 0.08064],   [100.0*-0.488, 0.0, 100.0*-0.458], 1.0, 7.363, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [8.49627 * self.M_star, self.r_half_light * 1.28033, [0.44090, -0.30206, 0.78671],  [100.0*1.178, 0.0, 100.0*0.987],   1.0, 0.290, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [1.38136 * self.M_star, self.r_half_light * 5.58119, [-0.72153, 0.02388, 0.61768], [100.0*2.050, 0.0, 100.0*2.324],   1.0, 3.421, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [65.6467 * self.M_star, self.r_half_light * 4.86282, [0.8096, 0.37985, 0.12231],    [100.0*-0.540, 0.0, 100.0*1.511],  1.0, 0.220, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [5.52143 * self.M_star, self.r_half_light * 1.80207, [0.56108, -0.22852, 0.46365], [100.0*-1.578, 0.0, 100.0*-2.655], 1.0, 2.816, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.123  * self.M_star, self.r_half_light * 2.02992, [0.61714, -0.32227, 0.56383],  [100.0*-0.728, 0.0, 100.0*0.122],  1.0, 0.178, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [18.7101 * self.M_star, self.r_half_light * 5.66219, [-0.55506, -0.31206, 0.12619],[100.0*1.396, 0.0, 100.0*1.586],   1.0, 8.937, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.0539 * self.M_star, self.r_half_light * 3.7759 , [-0.40152, 0.20618, 0.64831], [100.0*0.900, 0.0, 100.0*-1.841],  1.0, 0.256, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [84.8907 * self.M_star, self.r_half_light * 0.47746, [0.37486, -0.74585, 0.44142], [100.0*2.352, 0.0, 100.0*-0.491],  1.0, 9.700, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [2.00963 * self.M_star, self.r_half_light * 1.65403, [-0.34021, -0.52407,0.23569], [100.0*1.644, 0.0, 100.0*-2.882],  1.0, 0.102, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [85.0158 * self.M_star, self.r_half_light * 3.93771, [0.21806, -0.34819, 0.74236], [100.0*-2.682, 0.0,100.0* 1.705],  1.0, 6.140, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [51.1388 * self.M_star, self.r_half_light * 4.607  , [-0.35566, -0.28895, 0.16422], [100.0*1.967, 0.0, 100.0*1.295],   1.0, 0.163, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [64.728  * self.M_star, self.r_half_light * 9.20294, [-0.25770, -0.22602, 0.65810],[100.0*-0.407, 0.0, 100.0*-1.115], 1.0, 6.080, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [6.24477 * self.M_star, self.r_half_light * 9.64532, [0.73302, -0.65836, 0.00382], [100.0*-2.644, 0.0, 100.0*1.897],  1.0, 0.112, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [4.6774  * self.M_star, self.r_half_light * 0.22124, [0.47097, 0.17027, 0.45018],   [100.0*-0.137, 0.0, 100.0*-2.457], 1.0, 5.495, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.2702 * self.M_star, self.r_half_light * 8.77449, [-0.42381, 0.73640, 0.36167], [100.0*-0.591, 0.0, 100.0*-0.572], 1.0, 0.375, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [78.9437 * self.M_star, self.r_half_light * 7.10221, [0.31775, 0.30951, 0.57559],  [100.0*1.254, 0.0, 100.0*1.738],   1.0, 3.547, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [50.8009 * self.M_star, self.r_half_light * 6.01492, [0.51878, -0.27079, 0.29728], [100.0*0.357, 0.0, 100.0*-1.063],  1.0, 0.127, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1]
                                              ]
        elif draw == 'best_fit':
            self.startParametersWithoutDisk =[[2450.97 * 10.0 ** 6.0, 4016.38, [0.718, 0.0, -0.700], [-70.7, 0.0, -143.50], 1.0, 0.415, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #NFW Obl WOD
                                              [2451.05 * 10.0 ** 6.0, 2199.06, [0.698, 0.0, 0.716], [-69.46, 0.0, -143.56],  1.0, 2.206, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #NFW Pro WOD
                                              [1581.02 * 10.0 ** 6.0, 1903.92, [0.723, 0.0, -0.691], [-72.03, 0.0, -143.74], 1.0, 0.469, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #cored Obl WOD
                                              [1280.38 * 10.0 ** 6.0, 990.38, [0.693, 0.0, 0.721], [-71.70, 0.0, -143.69],  1.0, 2.035, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #cored Pro WOD
                                              [248.00 * 10.0 ** 6.0 , 1429.0, [0.724, 0.0, -0.690], [-72.01, 0.0, -143.38], 1.0, 0.466, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #Burkert Obl WOD
                                              [205.00 * 10.0 ** 6.0 , 749.08, [0.692, 0.0, 0.722], [-70.80, 0.0, -143.30],  1.0, 2.031, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1]  #Burkert Pro WOD
                                              ]
        elif draw == 'best_fit_random':
            best_fit_params = [[2450.97 * 10.0 ** 6.0, 4016.38, [0.718, 0.0, -0.700], [-70.7, 0.0, -143.50], 1.0, 0.415, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #NFW Obl WOD
                               [2451.05 * 10.0 ** 6.0, 2199.06, [0.698, 0.0, 0.716], [-69.46, 0.0, -143.56],  1.0, 2.206, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #NFW Pro WOD
                               [1581.02 * 10.0 ** 6.0, 1903.92, [0.723, 0.0, -0.691], [-72.03, 0.0, -143.74], 1.0, 0.469, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #cored Obl WOD
                               [1280.38 * 10.0 ** 6.0, 990.38, [0.693, 0.0, 0.721], [-71.70, 0.0, -143.69],  1.0, 2.035, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #cored Pro WOD
                               [248.00 * 10.0 ** 6.0 , 1429.0, [0.724, 0.0, -0.690], [-72.01, 0.0, -143.38], 1.0, 0.466, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1] , #Burkert Obl WOD
                               [205.00 * 10.0 ** 6.0 , 749.08, [0.692, 0.0, 0.722], [-70.80, 0.0, -143.30],  1.0, 2.031, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1]  #Burkert Pro WOD
                                 ]
            self.draw_widths = [5.0 * self.M_star, 2.0 * self.r_half_light, 0.1, [50.0, 0.0, 50.0], 0.0, 0.1, 0.0, 0.0, [0.0, 0.0, 0.0], 0.0]
            randomization_start_steps = []
            print 'Here 1' 
            self.startParametersWithoutDisk = [[constrainedUniform(params[0], self.draw_widths[0], self.param_ranges['M']), constrainedUniform(params[1], self.draw_widths[1], self.param_ranges['rs']),
                                                varyUnitVector(params[2], self.draw_widths[2], fixed_values = {1: 0.0}),
                                                [constrainedUniform(params[3][0], self.draw_widths[3][0], self.param_ranges['h_x_center']), 0.0, constrainedUniform(params[3][2], self.draw_widths[3][2], self.param_ranges['h_z_center'])],
                                                params[4], elSurrogateUniform(params[5], self.draw_widths[5], self.param_ranges['el']),
                                                params[6], params[7], params[8], params[9]]
                                              for params in best_fit_params]

        else:
            self.startParametersWithoutDisk =[[70.3571 * self.M_star, self.r_half_light * 8.83547, [-0.06359, -0.01797, 0.92016], [100.0*-0.629, 0.0, 100.0*-1.892], 1.0, 6.102, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [17.1108 * self.M_star, self.r_half_light * 9.05347, [-0.68151, 0.14758, 0.04311],  [100.0*-0.775, 0.0, 100.0*0.982],  1.0, 0.131, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [37.8199 * self.M_star, self.r_half_light * 3.85601, [-0.73428, 0.60676, 0.20308], [100.0*2.950, 0.0, 100.0*-2.408],  1.0, 8.031, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [61.1365 * self.M_star, self.r_half_light * 7.30224, [-0.36101, -0.45968, 0.67935], [100.0*-0.850, 0.0, 100.0*-1.004], 1.0, 0.149, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [55.1635 * self.M_star, self.r_half_light * 5.89776, [-0.11814, 0.06451, 0.49192],  [100.0*-0.369, 0.0, 100.0*0.964],  1.0, 6.467, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [74.8945 * self.M_star, self.r_half_light * 7.56676, [-0.24971, 0.72445, 0.60275], [100.0*-0.884, 0.0, 100.0*1.039],  1.0, 0.103, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [84.7848 * self.M_star, self.r_half_light * 4.87031, [0.70303, -0.28512, 0.01099],  [100.0*2.885, 0.0, 100.0*1.527],   1.0, 1.281, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [65.0552 * self.M_star, self.r_half_light * 9.33663, [0.10046, 0.76190, 0.49025],   [100.0*1.888, 0.0, 100.0*0.598],   1.0, 0.112, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [48.5131 * self.M_star, self.r_half_light * 7.03752, [0.11986, 0.50397, 0.18424],   [100.0*-1.277, 0.0, 100.0*-2.792], 1.0, 8.433, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [82.4393 * self.M_star, self.r_half_light * 3.80708, [-0.02893, -0.92939, 0.03744], [100.0*-1.277, 0.0, 100.0*0.875],  1.0, 0.175, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [91.2404 * self.M_star, self.r_half_light * 7.01702, [-0.39061, -0.01523, 0.0419], [100.0*-1.496, 0.0, 100.0*1.237],  1.0, 6.434, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [68.8804 * self.M_star, self.r_half_light * 8.39479, [0.15434, -0.22401, 0.05141], [100.0*1.352, 0.0, 100.0*1.258],   1.0, 0.455, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [12.7499 * self.M_star, self.r_half_light * 0.35373, [0.09645, 0.10003, 0.15474],   [100.0*-2.493, 0.0, 100.0*-2.353], 1.0, 8.235, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [88.2845 * self.M_star, self.r_half_light * 3.31369, [0.89324, 0.00262, 0.27069],  [100.0*0.233, 0.0, 100.0*-0.229],  1.0, 0.336, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [26.6478 * self.M_star, self.r_half_light * 7.72053, [0.42512, -0.49009, 0.63460],  [100.0*-2.317, 0.0, 100.0*2.926],  1.0, 4.631, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [54.1638 * self.M_star, self.r_half_light * 6.44575, [0.48098, 0.14876, 0.68992],  [100.0*1.268, 0.0, 100.0*1.725],   1.0, 0.372, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.4969 * self.M_star, self.r_half_light * 3.96718, [-0.05124, -0.39002, 0.63549], [100.0*1.787, 0.0, 100.0*1.611],   1.0, 5.417, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [6.58256 * self.M_star, self.r_half_light * 4.51944, [-0.73533, 0.27922, 0.08652], [100.0*0.626, 0.0, 100.0*1.336],   1.0, 0.666, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [4.13608 * self.M_star, self.r_half_light * 8.89791, [-0.08978, -0.49215, 0.5346], [100.0*0.375, 0.0, 100.0*-0.613],  1.0, 3.869, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [42.412  * self.M_star, self.r_half_light * 0.75362, [0.57384, -0.31836, 0.60926], [100.0*-1.792, 0.0,100.0* 1.832],  1.0, 0.153, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [47.1894 * self.M_star, self.r_half_light * 4.12288, [-0.00659, -0.49763, 0.11612], [100.0*0.212, 0.0,100.0* 1.856],   1.0, 2.835, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [37.5181 * self.M_star, self.r_half_light * 4.77909, [-0.52118, 0.19206, 0.43382], [100.0*0.499, 0.0, 100.0*-1.749],  1.0, 0.258, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [85.3793 * self.M_star, self.r_half_light * 2.71734, [0.04933, -0.58622, 0.19584], [100.0*-0.491, 0.0, 100.0*1.839],  1.0, 7.775, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [10.5465 * self.M_star, self.r_half_light * 4.68436, [-0.71056, -0.49361, 0.25157], [100.0*-1.092, 0.0, 100.0*1.040],  1.0, 0.387, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [94.7636 * self.M_star, self.r_half_light * 7.95765, [0.80002, 0.52432, 0.08064],   [100.0*-0.488, 0.0, 100.0*-0.458], 1.0, 7.363, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [8.49627 * self.M_star, self.r_half_light * 1.28033, [0.44090, -0.30206, 0.78671],  [100.0*1.178, 0.0, 100.0*0.987],   1.0, 0.290, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [1.38136 * self.M_star, self.r_half_light * 5.58119, [-0.72153, 0.02388, 0.61768], [100.0*2.050, 0.0, 100.0*2.324],   1.0, 3.421, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [65.6467 * self.M_star, self.r_half_light * 4.86282, [0.8096, 0.37985, 0.12231],    [100.0*-0.540, 0.0, 100.0*1.511],  1.0, 0.220, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [5.52143 * self.M_star, self.r_half_light * 1.80207, [0.56108, -0.22852, 0.46365], [100.0*-1.578, 0.0, 100.0*-2.655], 1.0, 2.816, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.123  * self.M_star, self.r_half_light * 2.02992, [0.61714, -0.32227, 0.56383],  [100.0*-0.728, 0.0, 100.0*0.122],  1.0, 0.178, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [18.7101 * self.M_star, self.r_half_light * 5.66219, [-0.55506, -0.31206, 0.12619],[100.0*1.396, 0.0, 100.0*1.586],   1.0, 8.937, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.0539 * self.M_star, self.r_half_light * 3.7759 , [-0.40152, 0.20618, 0.64831], [100.0*0.900, 0.0, 100.0*-1.841],  1.0, 0.256, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [84.8907 * self.M_star, self.r_half_light * 0.47746, [0.37486, -0.74585, 0.44142], [100.0*2.352, 0.0, 100.0*-0.491],  1.0, 9.700, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [2.00963 * self.M_star, self.r_half_light * 1.65403, [-0.34021, -0.52407,0.23569], [100.0*1.644, 0.0, 100.0*-2.882],  1.0, 0.102, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [85.0158 * self.M_star, self.r_half_light * 3.93771, [0.21806, -0.34819, 0.74236], [100.0*-2.682, 0.0,100.0* 1.705],  1.0, 6.140, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [51.1388 * self.M_star, self.r_half_light * 4.607  , [-0.35566, -0.28895, 0.16422], [100.0*1.967, 0.0, 100.0*1.295],   1.0, 0.163, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [64.728  * self.M_star, self.r_half_light * 9.20294, [-0.25770, -0.22602, 0.65810],[100.0*-0.407, 0.0, 100.0*-1.115], 1.0, 6.080, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [6.24477 * self.M_star, self.r_half_light * 9.64532, [0.73302, -0.65836, 0.00382], [100.0*-2.644, 0.0, 100.0*1.897],  1.0, 0.112, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [4.6774  * self.M_star, self.r_half_light * 0.22124, [0.47097, 0.17027, 0.45018],   [100.0*-0.137, 0.0, 100.0*-2.457], 1.0, 5.495, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [35.2702 * self.M_star, self.r_half_light * 8.77449, [-0.42381, 0.73640, 0.36167], [100.0*-0.591, 0.0, 100.0*-0.572], 1.0, 0.375, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [78.9437 * self.M_star, self.r_half_light * 7.10221, [0.31775, 0.30951, 0.57559],  [100.0*1.254, 0.0, 100.0*1.738],   1.0, 3.547, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1], 
                                              [50.8009 * self.M_star, self.r_half_light * 6.01492, [0.51878, -0.27079, 0.29728], [100.0*0.357, 0.0, 100.0*-1.063],  1.0, 0.127, 0.0, [0.0, 0.0, 1.0], [0.0, 0.0, 0.0], 0.1]
                                              ]
        # M, rs, halo_sym_axis, halo_center, zeta, el, eps, disk_sym_axis, disk_center, lam 
        if draw == 'random':
              self.startParametersWithDisk = [[70.3571 * self.M_star, self.r_half_light * 8.83547, [-0.06359, -0.01797, 0.92016], [100.0*-0.629, 0.0, 100.0*-1.892], 0.90, 6.102, 0.94, [0.35286, 0.13946, 0.07458], [100.0*2.997, 0.0, 100.0*0.647],   0.146], 
                                              [17.1108 * self.M_star, self.r_half_light * 9.05347, [-0.68151, 0.14758, 0.04311],  [100.0*-0.775, 0.0, 100.0*0.982], 0.70, 0.131, 0.75, [0.13476, 0.90747, 0.18082], [100.0*0.096, 0.0, 100.0*2.242],   0.053], 
                                              [37.8199 * self.M_star, self.r_half_light * 3.85601, [-0.73428, 0.60676, 0.20308], [100.0*2.950, 0.0, 100.0*-2.408],  1.74, 8.031, 0.21, [0.08247, 0.81961, 0.18082], [100.0*2.069, 0.0, 100.0*0.897],   0.113], 
                                              [61.1365 * self.M_star, self.r_half_light * 7.30224, [-0.36101, -0.45968, 0.67935], [100.0*-0.850, 0.0, 100.0*-1.004], 1.94, 0.149, 0.92, [0.10453, 0.73033, 0.45908], [100.0*-2.825, 0.0, 100.0*-1.598], 0.130], 
                                              [55.1635 * self.M_star, self.r_half_light * 5.89776, [-0.11814, 0.06451, 0.49192],  [100.0*-0.369, 0.0, 100.0*0.964],  0.24, 6.467, 0.70, [0.29386, 0.73316, 0.54300], [100.0*-2.988, 0.0, 100.0*-0.532], 0.079], 
                                              [74.8945 * self.M_star, self.r_half_light * 7.56676, [-0.24971, 0.72445, 0.60275], [100.0*-0.884, 0.0, 100.0*1.039],  1.78, 0.103, 0.87, [0.50305, 0.83862, 0.09410], [100.0*-1.551, 0.0, 100.0*-2.685], 0.147], 
                                              [84.7848 * self.M_star, self.r_half_light * 4.87031, [0.70303, -0.28512, 0.01099],  [100.0*2.885, 0.0, 100.0*1.527],   0.04, 1.281, 0.26, [0.39449, 0.25723, 0.10307], [100.0*-1.357, 0.0, 100.0*-0.651], 0.124], 
                                              [65.0552 * self.M_star, self.r_half_light * 9.33663, [0.10046, 0.76190, 0.49025],   [100.0*1.888, 0.0, 100.0*0.598],   0.82, 0.112, 0.54, [0.32146, 0.10639, 0.89147], [100.0*-2.753, 0.0, 100.0*0.820],  0.092], 
                                              [48.5131 * self.M_star, self.r_half_light * 7.03752, [0.11986, 0.50397, 0.18424],   [100.0*-1.277, 0.0, 100.0*-2.792], 0.86, 8.433, 0.41, [0.41739, 0.30403, 0.54962], [100.0*0.988, 0.0, 100.0*2.605],   0.076], 
                                              [82.4393 * self.M_star, self.r_half_light * 3.80708, [-0.02893, -0.92939, 0.03744], [100.0*-1.277, 0.0, 100.0*0.875],  0.86, 0.175, 0.60, [0.54591, 0.02908, 0.46969], [100.0*0.803, 0.0, 100.0*2.055],   0.088], 
                                              [91.2404 * self.M_star, self.r_half_light * 7.01702, [-0.39061, -0.01523, 0.0419], [100.0*-1.496, 0.0, 100.0*1.237],  0.54, 6.434, 0.91, [0.45392, 0.71450, 0.08588], [100.0*-0.669, 0.0, 100.0*-1.521], 0.135], 
                                              [68.8804 * self.M_star, self.r_half_light * 8.39479, [0.15434, -0.22401, 0.05141], [100.0*1.352, 0.0, 100.0*1.258],   1.96, 0.455, 0.86, [0.00765, 0.63314, 0.09110], [100.0*-1.023, 0.0, 100.0*-0.084], 0.103], 
                                              [12.7499 * self.M_star, self.r_half_light * 0.35373, [0.09645, 0.10003, 0.15474],   [100.0*-2.493, 0.0, 100.0*-2.353], 1.32, 8.235, 0.83, [0.34118, 0.24194 ,0.35505], [100.0*1.643, 0.0, 100.0*2.458],   0.070], 
                                              [88.2845 * self.M_star, self.r_half_light * 3.31369, [0.89324, 0.00262, 0.27069],  [100.0*0.233, 0.0, 100.0*-0.229],  0.94, 0.336, 0.73, [0.15882, 0.05565, 0.94530], [100.0*-1.509, 0.0, 100.0*0.235],  0.124], 
                                              [26.6478 * self.M_star, self.r_half_light * 7.72053, [0.42512, -0.49009, 0.63460],  [100.0*-2.317, 0.0, 100.0*2.926],  0.52, 4.631, 0.40, [0.07195, 0.57611, 0.14523], [100.0*1.056, 0.0, 100.0*-0.601],  0.107], 
                                              [54.1638 * self.M_star, self.r_half_light * 6.44575, [0.48098, 0.14876, 0.68992],  [100.0*1.268, 0.0, 100.0*1.725],   1.56, 0.372, 0.46, [0.19318, 0.54428, 0.02894], [100.0*-2.659, 0.0, 100.0*-0.471], 0.066], 
                                              [35.4969 * self.M_star, self.r_half_light * 3.96718, [-0.05124, -0.39002, 0.63549], [100.0*1.787, 0.0, 100.0*1.611],   0.9, 5.417, 0.26, [0.11318, 0.32292, 0.14523], [100.0*-1.225, 0.0, 100.0*1.523],  0.088], 
                                              [6.58256 * self.M_star, self.r_half_light * 4.51944, [-0.73533, 0.27922, 0.08652], [100.0*0.626, 0.0, 100.0*1.336],   0.98, 0.666, 0.54, [0.19318, 0.54428, 0.02894], [100.0*-2.618, 0.0, 100.0*0.268],  0.115], 
                                              [4.13608 * self.M_star, self.r_half_light * 8.89791, [-0.08978, -0.49215, 0.5346], [100.0*0.375, 0.0, 100.0*-0.613],  0.64, 3.869, 0.95, [0.11318, 0.32292, 0.51462], [100.0*1.176, 0.0, 100.0*0.123],   0.147], 
                                              [42.412  * self.M_star, self.r_half_light * 0.75362, [0.57384, -0.31836, 0.60926], [100.0*-1.792, 0.0,100.0* 1.832],  0.38, 0.153, 0.24, [0.10536, 0.46602, 0.22891], [100.0*-1.968, 0.0, 100.0*2.120],  0.121], 
                                              [47.1894 * self.M_star, self.r_half_light * 4.12288, [-0.00659, -0.49763, 0.11612], [100.0*0.212, 0.0,100.0* 1.856],   0.76, 2.835, 0.81, [0.80891, 0.16780, 0.13534], [100.0*2.540, 0.0, 100.0*2.977],   0.061], 
                                              [37.5181 * self.M_star, self.r_half_light * 4.77909, [-0.52118, 0.19206, 0.43382], [100.0*0.499, 0.0, 100.0*-1.749],  0.66, 0.258, 0.72, [0.40629, 0.71603, 0.19603], [100.0*2.897, 0.0, 100.0*-2.511],  0.121], 
                                              [85.3793 * self.M_star, self.r_half_light * 2.71734, [0.04933, -0.58622, 0.19584], [100.0*-0.491, 0.0, 100.0*1.839],  0.12, 7.775, 0.44, [0.29432, 0.53399, 0.15683], [100.0*0.515, 0.0, 100.0*-2.931],  0.091], 
                                              [10.5465 * self.M_star, self.r_half_light * 4.68436, [-0.71056, -0.49361, 0.25157], [100.0*-1.092, 0.0, 100.0*1.040],  0.54, 0.387, 0.91, [0.28926, 0.33985, 0.86246], [100.0*-0.510, 0.0, 100.0*2.521],  0.127], 
                                              [94.7636 * self.M_star, self.r_half_light * 7.95765, [0.80002, 0.52432, 0.08064],   [100.0*-0.488, 0.0, 100.0*-0.458], 0.80, 7.363, 0.29, [0.67433, 0.20126, 0.51019], [100.0*2.527, 0.0, 100.0*0.795],   0.079], 
                                              [8.49627 * self.M_star, self.r_half_light * 1.28033, [0.44090, -0.30206, 0.78671],  [100.0*1.178, 0.0, 100.0*0.987],   1.44, 0.290, 0.18, [0.65156, 0.24518, 0.04335], [100.0*2.961, 0.0, 100.0*1.831],   0.101], 
                                              [1.38136 * self.M_star, self.r_half_light * 5.58119, [-0.72153, 0.02388, 0.61768], [100.0*2.050, 0.0, 100.0*2.324],   1.70, 3.421, 0.38, [0.86532, 0.12109, 0.11625], [100.0*1.309, 0.0, 100.0*2.125],   0.063], 
                                              [65.6467 * self.M_star, self.r_half_light * 4.86282, [0.8096, 0.37985, 0.12231],    [100.0*-0.540, 0.0, 100.0*1.511],   0.02, 0.220, 0.50, [0.13043, 0.06138, 0.25887], [100.0*-2.742, 0.0, 100.0*2.677],  0.099], 
                                              [5.52143 * self.M_star, self.r_half_light * 1.80207, [0.56108, -0.22852, 0.46365], [100.0*-1.578, 0.0, 100.0*-2.655],  1.70, 2.816, 0.01, [0.20857, 0.31259, 0.38234], [100.0*-1.168, 0.0, 100.0*-2.794], 0.126], 
                                              [35.123  * self.M_star, self.r_half_light * 2.02992, [0.61714, -0.32227, 0.56383],  [100.0*-0.728, 0.0, 100.0*0.122], 1.36, 0.178, 0.11, [0.35140, 0.67466, 0.34438], [100.0*-1.095, 0.0, 100.0*-1.040], 0.147], 
                                              [18.7101 * self.M_star, self.r_half_light * 5.66219, [-0.55506, -0.31206, 0.12619],[100.0*1.396, 0.0, 100.0*1.586],  1.80, 8.937, 0.28, [0.78811, 0.12478, 0.30429], [100.0*1.020, 0.0, 100.0*-1.983],  0.134], 
                                              [35.0539 * self.M_star, self.r_half_light * 3.7759 , [-0.40152, 0.20618, 0.64831], [100.0*0.900, 0.0, 100.0*-1.841],   0.56, 0.256, 0.38, [0.07977, 0.01323, 0.79784], [100.0*0.477, 0.0, 100.0*0.948],   0.115], 
                                              [84.8907 * self.M_star, self.r_half_light * 0.47746, [0.37486, -0.74585, 0.44142], [100.0*2.352, 0.0, 100.0*-0.491],  1.38, 9.700, 0.01, [0.49318, 0.62746, 0.0567],  [100.0*1.391, 0.0, 100.0*-2.696],  0.079], 
                                              [2.00963 * self.M_star, self.r_half_light * 1.65403, [-0.34021, -0.52407,0.23569], [100.0*1.644, 0.0, 100.0*-2.882],  1.68, 0.102, 0.71, [0.60066, 0.21862, 0.31554], [100.0*1.848, 0.0, 100.0*0.465],   0.118], 
                                              [85.0158 * self.M_star, self.r_half_light * 3.93771, [0.21806, -0.34819, 0.74236], [100.0*-2.682, 0.0,100.0* 1.705],  0.12, 6.140, 0.85, [0.26163, 0.43839, 0.76370], [100.0*-1.335, 0.0, 100.0*-0.353], 0.094], 
                                              [51.1388 * self.M_star, self.r_half_light * 4.607  , [-0.35566, -0.28895, 0.16422], [100.0*1.967, 0.0, 100.0*1.295],  0.50, 0.163, 0.41, [0.57180, 0.08405, 0.62365], [100.0*-2.784, 0.0, 100.0*-0.120], 0.146], 
                                              [64.728  * self.M_star, self.r_half_light * 9.20294, [-0.25770, -0.22602, 0.65810],[100.0*-0.407, 0.0, 100.0*-1.115],   0.70, 6.080, 0.03, [0.04953, 0.28668, 0.11944], [100.0*-2.819, 0.0, 100.0*-3.00],  0.055], 
                                              [6.24477 * self.M_star, self.r_half_light * 9.64532, [0.73302, -0.65836, 0.00382], [100.0*-2.644, 0.0, 100.0*1.897], 1.90, 0.112, 0.50, [0.92610, 0.17984, 0.05382], [100.0*0.070, 0.0, 100.0*2.427],   0.111], 
                                              [4.6774  * self.M_star, self.r_half_light * 0.22124, [0.47097, 0.17027, 0.45018],   [100.0*-0.137, 0.0, 100.0*-2.457],  0.90, 5.495, 0.02, [0.26845, 0.02691, 0.63862], [100.0*-1.585, 0.0, 100.0*-2.788], 0.112], 
                                              [35.2702 * self.M_star, self.r_half_light * 8.77449, [-0.42381, 0.73640, 0.36167], [100.0*-0.591, 0.0, 100.0*-0.572], 0.06, 0.375, 0.18, [0.40839, 0.40857, 0.54072], [100.0*-2.341, 0.0, 100.0*-1.034], 0.070], 
                                              [78.9437 * self.M_star, self.r_half_light * 7.10221, [0.31775, 0.30951, 0.57559],  [100.0*1.254, 0.0, 100.0*1.738],   0.36, 3.547, 0.35, [0.95662, 0.10685, 0.00593], [100.0*-2.608, 0.0, 100.0*0.258],  0.083],
                                              [50.8009 * self.M_star, self.r_half_light * 6.01492, [0.51878, -0.27079, 0.29728], [100.0*0.357, 0.0, 100.0*-1.063],  0.14, 0.127, 0.38, [0.31739, 0.07114, 0.60076], [100.0*2.713, 0.0, 100.0*0.505],   0.101]
	                                   ]
        elif draw == 'best_fit':
            self.startParametersWithDisk =[[(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *641.7, [0.71990, 0.0, -0.69410], [-0.106, 0.0, -0.219], 0.33 , 0.370, 0.047, [0.0, 0.0, 1.0], [-0.69, 0.0, -0.99], 0.1], #NFW Obl WD
                                              [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *330.5, [0.70260, 0.0,  0.71160], [-0.200, 0.0, -0.425], 0.79 , 2.422, 0.047, [0.0, 0.0, 1.0], [-1.34, 0.0, -1.92], 0.1], #NFW Pro WD
                                              [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *538.9, [0.72190, 0.0, -0.69200], [-0.134, 0.0, -0.272], 1.0  , 0.420, 0.0,   [0.0, 0.0, 1.0], [0.0, 0.0, 0.0],     0.1], #cored Obl WD
                                              [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *294.2, [0.69250, 0.0,  0.72140], [-0.233, 0.0, -0.498], 1.0  , 2.238, 0.0,   [0.0, 0.0, 1.0], [0.0, 0.0, 0.0],     0.1], #cored Pro WD
                                              [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *1154.2, [0.70720, 0.0, -0.70700], [-0.065, 0.0, -0.134], 1.0  , 0.394, 0.051, [0.0, 0.0, 1.0], [-0.11, 0.0, 2.30],  0.1], #Burkert Obl WD
                                              [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *649.1, [0.69180, 0.0,  0.72210], [-0.106, 0.0, -0.223], 0.408, 2.423, 0.066, [0.0, 0.0, 1.0], [-0.08, 0.0, -0.17], 0.1]  #Burkert Pro WD
                                              ]
        else: 
        
	    self.startParametersWithDisk = [[(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *200, math.pi * 0.0, math.pi * 0.0, 0.05, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.0, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.0, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.0, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.0, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.0, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
                                        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.0, math.pi * 0.5, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.5, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.5, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.5, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.5, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.5, 0.05, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
                                        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.0, math.pi * 0.0, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.0, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.0, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.0, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.0, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.0, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
                                        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.0, math.pi * 0.5, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.5, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.5, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.5, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.5, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.5, 0.2, 0.5, 0.05, math.pi*0.0, math.pi*0.5, 0.1],
                                        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.0, math.pi * 0.0, 0.05, 0.2 , math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.0, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.0, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.0, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.0, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.0, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
                                        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.0, math.pi * 0.5, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.5, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.5, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.5, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.5, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.5, 0.05, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
                                        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.0, math.pi * 0.0, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.0, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.0, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.0, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.0, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.0, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
                                        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.0, math.pi * 0.5, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.0, math.pi * 0.5, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.0, math.pi * 0.5, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *250, math.pi * 0.5, math.pi * 0.5, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
	                                [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *500, math.pi * 0.5, math.pi * 0.5, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1],
				        [(15.7*10**7 - 10**7) * 10 + 10 ** 6, 10.0 *850, math.pi * 0.5, math.pi * 0.5, 0.2, 0.5, 0.2, math.pi*0.0, math.pi*0.5, 0.1]
                                        
	                              ]
