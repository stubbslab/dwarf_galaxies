import numpy as np

def normalizeSurfaceProbability(R_axis, z_axis, surface_prob):

    Rmesh, zmesh = np.meshgrid(R_axis,z_axis)
    normalization_constant = 0.0
    for i in range(np.shape(surface_prob[0]):
        for j in range(np.shape(surface_prob)[1]):
            prob_at_point = surface_prob[i][j]
            if i == 0:
	        print 'i == 0' 
                prob_at_point = prob_at_point * (Rmesh[i+1][j]-Rmesh[i][j])
            elif i = np.shape(surface_prob)[0]:
	        print 'i = ' + str(i) 
                prob_at_point = prob_at_point * (Rmesh[i][j]-Rmesh[i-1][j])
            else:
                print ' i = ' + str(i) 
                prob_at_point = prob_at_point * (Rmesh[i+1][j]-Rmesh[i-1][j]) / 2.0
            if j == 0:
	        print ' j = ' + str(j) 
                prob_at_point = prob_at_point * (zmesh[i][j+1]-zmesh[i][j])
            elif j = len(np.shape(self.surfaceBrightness)[1]):
	         print ' j = ' + str(j) 
                prob_at_point = prob_at_point * (zmesh[i][j]-zmesh[i][j-1])
            else:
	        print ' j = ' + str(j) 
                prob_at_point = prob_at_point * (Rmesh[i][j+1]-Rmesh[i][j-1]) / 2.0
            normalization_constant = normalization_constant + prob_at_point

    return self.surfaceBrightness = surface_prob / normalization_constant 
